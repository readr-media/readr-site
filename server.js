const _ = require('lodash')
const Cookies = require('cookies')
const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const microcache = require('route-cache')
const requestIp = require('request-ip')
const resolve = file => path.resolve(__dirname, file)
const uuidv4 = require('uuid/v4')
const { PAGE_CACHE_EXCLUDING, GOOGLE_CLIENT_ID, TALK_SERVER } = require('./api/config')
const { createBundleRenderer } = require('vue-server-renderer')

const debug = require('debug')('READR:server')
const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()
const superagent = require('superagent')

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./distribution'),
    // recommended for performance
    runInNewContext: false
  }))
}

app.use(requestIp.mw())
app.set('views', path.join(__dirname, 'src/views'))
app.set('view engine', 'ejs')

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./distribution/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./distribution/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/favicon-48x48.png'))
app.use('/distribution', serve('./distribution', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./distribution/service-worker.js'))

app.use('/talk', (req, res) => {
  debug('req', req.url)
  superagent
    .get('http://localhost:3000' + req.url)
    .end((err, response) => {
      console.log('response', response.text)
      res.send(response)
    })
})

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
// app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

function render (req, res, next) {
  if (req.url.indexOf('/api/') === 0) {
    next()
    return
  } else if (req.url.indexOf('/404') === 0) {
    res.status(404).send('404 | Page Not Found')
    return
  }

  const s = Date.now()
  let isPageNotFound = false
  let isErrorOccurred = false  

  const curr_host = _.get(req, 'headers.host') || ''
  const targ_exp = /(dev)|(localhost)/
  const targ_exp_login = /(\/login)/
  debug('Current client host:', curr_host, !curr_host.match(targ_exp))
  debug('Requested page:', req.url, req.url.match(targ_exp_login))

  if (_.filter(PAGE_CACHE_EXCLUDING, (p) => (req.url.indexOf(p) > -1)).length === 0) {
    !curr_host.match(targ_exp) && res.setHeader('Cache-Control', 'public, max-age=3600')  
  }
  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const cookies = new Cookies( req, res, {} )
  const readrid = cookies.get('readrid')
  if (!readrid) {
    cookies.set('readrid', uuidv4(), { httpOnly: false, expires: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) })
  }

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'Readr',
    description: 'Readr',
    metaUrl: 'dev.readr.tw',
    metaImage: '/public/og.png',
    url: req.url,
    cookie: cookies.get('csrf'),
    initmember: cookies.get('initmember'),
    check_fb_status: req.url.match(targ_exp_login)
      ? `FB.getLoginStatus(function(response) {
          if (response.status === 'connected') {
            window.fbStatus = {
              status: 'connected',
              uid: response.authResponse.userID
            };
          }
        })`
      : '',
    include_gapi: req.url.match(targ_exp_login) ? `
      <script src="https://apis.google.com/js/api.js"></script>
      <script>
        var gapiLoadedHandler = function () {
          window.gapi.client.init({
            discoveryDocs: [ 'https://people.googleapis.com/$discovery/rest?version=v1' ],
            clientId: "${GOOGLE_CLIENT_ID}",
            scope: 'profile'
          }).then((res) => {
            const isSignedIn = window.gapi.auth2.getAuthInstance().isSignedIn.get()
            if (isSignedIn) {
              var currUser = window.gapi.auth2.getAuthInstance().currentUser.get()
              window.googleStatus = {
                status: 'singedIn',
                idToken: currUser && (currUser.getAuthResponse().id_token)
              }
            }
          })
        } 
        window.gapi && window.gapi.load('client', this.gapiLoadedHandler);
      </script>` : '',
      include_recaptcha: req.url.match(targ_exp_login) ? `<script src='https://www.google.com/recaptcha/api.js'></script>` : '',
    TALK_SERVER
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

app.get('*', isProd ? render : (req, res, next) => {
  readyPromise.then(() => render(req, res, next))
})
// .put('*', (req, res, next) => {
//   if (req.url.indexOf('/api/') === 0) {
//     next()
//     return
//   }
//   res.status(403).send('Forbidden')
// }).post('*', (req, res, next) => {
//   if (req.url.indexOf('/api/') === 0) {
//     next()
//     return
//   }
//   res.status(403).send('Forbidden')
// }).delete('*', (req, res, next) => {
//   if (req.url.indexOf('/api/') === 0) {
//     next()
//     return
//   }
//   res.status(403).send('Forbidden')
// })

app.use('/api', require('./api/index'))

const port = process.env.PORT || 8080
const server = app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
module.exports = {
  close: () => {
    server.close()
  },
  ready: readyPromise,
  app: server
}